{"version":3,"sources":["logo.svg","components/AppHeader.js","components/Card.js","components/AppBody.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppHeader","className","Component","Card","props","this","handleClick","name","cardId","isDisplay","cardImgUrl","imgClass","cardBackClass","cardWrapperClass","src","onClick","AppBody","state","cards","data","reviewedCardCount","reviewedCardName","reviewedCardId","totalClicks","map","card","id","isFound","setState","matchedCards","filter","c","matchedCard","foldedCards","foldedCard","handleReset","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0329410e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass AppHeader extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"text-center p-3\">\r\n        <h1>Memory Game</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default AppHeader;\r\n","import React, { Component } from 'react';\r\n\r\nclass Card extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { handleClick, name, cardId, isDisplay } = this.props;\r\n\r\n    const cardImgUrl = '/images/' + name + '.png';\r\n\r\n    const imgClass = 'card_image ' + (isDisplay ? 'd-show' : 'd-hide');\r\n\r\n    const cardBackClass = (isDisplay ? '' : 'card_back');\r\n\r\n    const cardWrapperClass = 'card_wrapper text-center ' + (isDisplay ? 'card_wrapper_bk_show' : 'card_wrapper_bk_red');\r\n\r\n    return (\r\n      <div className={cardWrapperClass}>\r\n        <img className={imgClass}  src={cardImgUrl} onClick={() => handleClick(cardId)} />\r\n        <div className={cardBackClass}></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react';\r\nimport Card from './Card.js';\r\nimport data from './cards.json';\r\n\r\nclass AppBody extends Component {\r\n\r\n  state = {\r\n    cards : data,\r\n    reviewedCardCount : 0,\r\n    reviewedCardName : null,\r\n    reviewedCardId : null,\r\n    totalClicks : 0\r\n  };\r\n\r\n  handleClick = (cardId) => {\r\n    const cards = [...this.state.cards];\r\n    cards.map((card) => {\r\n      if (card.id === cardId) {\r\n        if (!card.isFound && card.id !== this.state.reviewedCardId) {\r\n          card.isDisplay = !card.isDisplay;\r\n          let reviewedCardCount = this.state.reviewedCardCount;\r\n          if (this.state.reviewedCardCount < 2) {\r\n            if (this.state.reviewedCardCount === 0) {\r\n              this.setState({\r\n                reviewedCardName: card.name,\r\n                reviewedCardId: card.id\r\n              });\r\n            } else {\r\n              if (this.state.reviewedCardName === card.name) {\r\n                let matchedCards = this.state.cards.filter(c => c.name === card.name);\r\n                matchedCards.map(matchedCard => {\r\n                  matchedCard.isFound = true;\r\n                });\r\n                this.setState({\r\n                  cards: matchedCards\r\n               });\r\n              }\r\n              this.setState({\r\n                reviewedCardName: null,\r\n                reviewedCardId: null\r\n              });\r\n            }\r\n            reviewedCardCount++;\r\n            this.setState({ reviewedCardCount });\r\n          } else {\r\n            reviewedCardCount = 1;\r\n            let foldedCards = this.state.cards.filter(c => (c.id !== cardId && !c.isFound));\r\n            foldedCards.map(foldedCard => {\r\n              foldedCard.isDisplay = false;\r\n            });\r\n            this.setState({\r\n              cards: foldedCards,\r\n              reviewedCardCount: reviewedCardCount,\r\n              reviewedCardName: card.name,\r\n              reviewedCardId: card.id\r\n           });\r\n          }\r\n          let totalClicks = this.state.totalClicks;\r\n          totalClicks++;\r\n          this.setState({ totalClicks });\r\n        }\r\n      }\r\n    });\r\n    this.setState({ cards });\r\n  }\r\n\r\n  handleReset = () => {\r\n    const cards = [...this.state.cards];\r\n    cards.map(card => {\r\n      card.isDisplay = false;\r\n      card.isFound = false;\r\n    });\r\n    this.setState({\r\n      cards: cards,\r\n      reviewedCardId: null,\r\n      reviewedCardName: null,\r\n      reviewedCardCount: 0,\r\n      totalClicks: 0\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"pb-3 text-center\">\r\n          <p>Your Clicks: <span>{this.state.totalClicks}</span></p>\r\n          <button className=\"btn btn-secondary\" onClick={this.handleReset}>Reset</button>\r\n        </div>\r\n        <div className=\"row\">\r\n          {this.state.cards.map((card) => (\r\n            <div className=\"col-md-3 col-sm-6 mt-3\" key={card.id}>\r\n              <Card\r\n                name={card.name}\r\n                cardId={card.id}\r\n                key={card.id}\r\n                handleClick={this.handleClick}\r\n                isDisplay={card.isDisplay}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default AppBody;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AppHeader from './components/AppHeader.js';\nimport AppBody from './components/AppBody.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppHeader />\n      <AppBody />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}